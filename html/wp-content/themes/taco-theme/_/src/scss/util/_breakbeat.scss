$output_em_queries: true !default;
$output_query_comments: true !default;
$global_font_size: 16px !default;

// Foundation defaults
$breakpoints: (
  small: 0,
  medium: 640px,
  large: 1024px,
  xlarge: 1200px,
  xxlarge: 1440px,
) !default;

$breakpoint_classes: map_keys($breakpoints) !default;

@function bb_adjacent_breakpoint($breakpoint_name, $direction, $is_height: false) {
  $breakpoints_set: $breakpoints;
  @if $is_height {
    $breakpoints_set: set_height_breakpoints_set();
  }
  $current_index: index(map_keys($breakpoints_set), $breakpoint_name);
  @if $current_index == null {
    $error: bb_unknown_breakpoint_error($breakpoint_name);
  }
  $adjacent_index: ($current_index + $direction);
  $adjacent_name: null;
  $adjacent_size: null;
  @if $adjacent_index < 1 or $adjacent_index > length($breakpoints_set) {
    $adjacent_name: $breakpoint_name;
    $adjacent_size: map_get($breakpoints_set, $breakpoint_name);
  } @else {
    $adjacent_name: nth(map_keys($breakpoints_set), $adjacent_index);
    $adjacent_size: nth(map_values($breakpoints_set), $adjacent_index);
  }
  @return ($adjacent_name: $adjacent_size);
}
@function bb_adjacent_breakpoint_size($breakpoint_name, $direction, $is_height: false) {
  $adjacent_breakpoint: bb_adjacent_breakpoint($breakpoint_name, $direction, $is_height);
  $adjacent_size: nth(map_values($adjacent_breakpoint), 1);
  @return $adjacent_size;
}
@function bb_adjacent_breakpoint_name($breakpoint_name, $direction, $is_height: false) {
  $adjacent_breakpoint: bb_adjacent_breakpoint($breakpoint_name, $direction, $is_height);
  $adjacent_name: nth(map_keys($adjacent_breakpoint), 1);
  @return $adjacent_name;
}
@function bb_prev_breakpoint_size($breakpoint_name, $is_height) {
  @return bb_adjacent_breakpoint_size($breakpoint_name, -1, $is_height);
}
@function bb_prev_breakpoint_name($breakpoint_name, $is_height) {
  @return bb_adjacent_breakpoint_name($breakpoint_name, -1, $is_height);
}
@function bb_next_breakpoint_size($breakpoint_name, $is_height) {
  @return bb_adjacent_breakpoint_size($breakpoint_name, 1, $is_height);
}
@function bb_next_breakpoint_name($breakpoint_name, $is_height) {
  @return bb_adjacent_breakpoint_name($breakpoint_name, 1, $is_height);
}
@function bb_get_property($breakpoint) {
  $property: 'width';
  $first_letter: str_slice($breakpoint, 1, 1);
  @if index(('h', 'y'), $first_letter) {
    $property: 'height';
  }
  @return $property;
}
@function bb_remove_property($breakpoint) {
  $first_letter: str_slice($breakpoint, 1, 1);
  @if index(('w', 'x', 'h', 'y'), $first_letter) {
    $breakpoint: str_slice($breakpoint, str_index($breakpoint, ' ') + 1);
  }
  @return $breakpoint;
}
@function set_height_breakpoints_set() {
  $breakpoints_set: $breakpoints;
  @if variable_exists(h_breakpoints) {
    $breakpoints_set: $h_breakpoints;
  } @else if variable_exists(y_breakpoints) {
    $breakpoints_set: $y_breakpoints;
  }
  @return $breakpoints_set;
}
@function bb_percent_to_px($value) {
  @if unitless($value) {
    $value: ($value * 1px);
  }
  @if unit($value) != '%' {
    @return $value;
  }
  $default_global_font_size: 16px;
  @return (bb_strip_units($value / 100) * $default_global_font_size);
}
@function bb_px_to_em($value) {
  @if bb_is_zero($value) {
    @return 0;
  }
  @if unitless($value) {
    $value: ($value * 1px);
  }
  @if unit($value) != 'px' {
    @return $value;
  }
  $global_font_size_px: bb_percent_to_px($global_font_size);
  $em: (round(($value / $global_font_size_px) * 10000) / 10000);
  @return ($em * 1em);
}
@function bb_em_to_px($value) {
  @if bb_is_zero($value) {
    @return 0;
  }
  @if unitless($value) {
    $value: ($value * 1em);
  }
  @if unit($value) != 'em' {
    @return $value;
  }
  $global_font_size_px: bb_percent_to_px($global_font_size);
  $px: (($value / 1em) * $global_font_size_px);
  @return $px;
}
@function bb_is_zero($value) {
  @return
    type_of($value) == number
    and bb_strip_units($value) == 0;
}
@function bb_strip_units($num) {
  @return ($num / (($num * 0) + 1));
}
@function bb_unknown_breakpoint_error($breakpoint_name) {
  @error 'Unknown breakpoint name: #{$breakpoint_name}';
}
@function bb_too_many_arguments_error($breakpoint_name) {
  @error 'Too many breakpoint names in media query: #{$breakpoint_name}';
}

@function b($breakpoint, $scale: 0) {
  @return breakbeat($breakpoint, $scale);
}
@function breakbeat($breakpoint, $scale: 0, $allow_null: false) {
  $is_height: false;
  $breakpoints_set: $breakpoints;
  $property: bb_get_property($breakpoint);
  @if $property == 'height' {
    $is_height: true;
    $breakpoints_set: set_height_breakpoints_set();
  }
  $breakpoint: bb_remove_property($breakpoint);
  @if str_index($breakpoint, ' ') == null {
    @error 'Insufficient arguments in media query';
  }
  $operator: str_slice($breakpoint, 1, str_index($breakpoint, ' ') - 1);
  $breakpoint_name: str_slice($breakpoint, str_index($breakpoint, ' ') + 1);
  @if str_index($breakpoint_name, ' ') and $operator != '><' {
    $error: bb_too_many_arguments_error($breakpoint_name);
  }
  $breakpoint_size: map_get($breakpoints_set, $breakpoint_name);
  @if $breakpoint_size == null and str_index($breakpoint_name, ' ') == null {
    $error: bb_unknown_breakpoint_error($breakpoint_name);
  }
  $media_query: null;
  @if $operator == '>=' {
    @if $scale != 0 {
      $next_size: bb_next_breakpoint_size($breakpoint_name, $is_height);
      $breakpoint_size: round($breakpoint_size + (($next_size - $breakpoint_size) * $scale));
    }
    @if $output_em_queries {
      $breakpoint_size: bb_px_to_em($breakpoint_size);
    }
    @if $breakpoint_size != 0 {
      $media_query: 'min-#{$property}: #{$breakpoint_size}';
    }
  } @else if $operator == '>' {
    $next_size: bb_next_breakpoint_size($breakpoint_name, $is_height);
    @if $scale != 0 {
      $next_name: bb_next_breakpoint_name($breakpoint_name, $is_height);
      $next_next_name: bb_next_breakpoint_name($next_name, $is_height);
      $next_next_size: bb_next_breakpoint_size($next_name, $is_height);
      $next_size: round($next_size + (($next_next_size - $next_size) * $scale));
    }
    @if $output_em_queries {
      $next_size: bb_px_to_em($next_size);
    }
    $media_query: 'min-#{$property}: #{$next_size}';
  } @else if $operator == '<=' {
    $next_size: bb_next_breakpoint_size($breakpoint_name, $is_height);
    @if $scale != 0 {
      $next_size: round($breakpoint_size + (($next_size - $breakpoint_size) * $scale));
    }
    @if $next_size != $breakpoint_size {
      $next_size: ($next_size - 1px);
      @if $output_em_queries {
        $next_size: bb_px_to_em($next_size);
      }
      $media_query: 'max-#{$property}: #{$next_size}';
    }
  } @else if $operator == '<' {
    @if $scale != 0 {
      $prev_size: bb_prev_breakpoint_size($breakpoint_name, $is_height);
      $breakpoint_size: round($breakpoint_size - (($breakpoint_size - $prev_size) * $scale));
    }
    @if $breakpoint_size <= 0 {
      $breakpoint_size: bb_next_breakpoint_size($breakpoint_name, $is_height);
    }
    $breakpoint_size: ($breakpoint_size - 1px);
    @if $output_em_queries {
      $breakpoint_size: bb_px_to_em($breakpoint_size);
    }
    $media_query: 'max-#{$property}: #{$breakpoint_size}';
  } @else if $operator == '><' {
    @if str_index($breakpoint_name, ' ') == null {
      @error 'Between >< operator requires two breakpoint names';
    }
    $first_name: str_slice($breakpoint_name, 1, str_index($breakpoint_name, ' ') - 1);
    $second_name: str_slice($breakpoint_name, str_index($breakpoint_name, ' ') + 1);
    $breakpoint_size: map_get($breakpoints_set, $first_name);
    $next_name: bb_next_breakpoint_name($second_name, $is_height);
    $next_size: (bb_next_breakpoint_size($second_name, $is_height) - 1px);
    @if $output_em_queries {
      $breakpoint_size: bb_px_to_em($breakpoint_size);
      $next_size: bb_px_to_em($next_size);
    }
    @if $breakpoint_size == 0 and $second_name != $next_name {
      $media_query: 'max-#{$property}: #{$next_size}';
    } @else if $next_name != $first_name
      and $breakpoint_size < $next_size
      and $second_name != $next_name {
      $media_query: 'min-#{$property}: #{$breakpoint_size}) and (max-#{$property}: #{$next_size}';
    } @else if $breakpoint_size != 0 {
      $media_query: 'min-#{$property}: #{$breakpoint_size}';
    }
  } @else if index(('=', '==', '==='), $operator) {
    $next_name: bb_next_breakpoint_name($breakpoint_name, $is_height);
    $next_size: bb_next_breakpoint_size($breakpoint_name, $is_height);
    @if $scale < 0 {
      $next_size: round($breakpoint_size + (($next_size - $breakpoint_size) * abs($scale)));
    } @else if $scale > 0 {
      $breakpoint_size: round($breakpoint_size + (($next_size - $breakpoint_size) * $scale));
    }
    $next_size: ($next_size - 1px);
    @if $output_em_queries {
      $breakpoint_size: bb_px_to_em($breakpoint_size);
      $next_size: bb_px_to_em($next_size);
    }
    @if $breakpoint_size == 0 {
      $media_query: 'max-#{$property}: #{$next_size}';
    } @else if $next_name != $breakpoint_name and $breakpoint_size < $next_size {
      $media_query: 'min-#{$property}: #{$breakpoint_size}) and (max-#{$property}: #{$next_size}';
    } @else {
      $media_query: 'min-#{$property}: #{$breakpoint_size}';
    }
  }
  @if $media_query == null {
    @if $allow_null {
      @return null;
    }
    @return unquote('(min-#{$property}: 0)');
  }
  @return unquote('(#{$media_query})');
}

@mixin b($breakpoint, $scale: 0) {
  @include breakbeat($breakpoint, $scale) {
    @content;
  }
}
@mixin breakbeat($breakpoint, $scale: 0) {
  $media_query: breakbeat($breakpoint, $scale, true);
  $property: bb_get_property($breakpoint);
  $breakpoint: bb_remove_property($breakpoint);
  @if $media_query != null {
    @media #{$media_query} {
      @if $output_query_comments {
        $report: $breakpoint;
        @if $scale != 0 {
          $report: $report + ', scale ' + $scale;
        }
        /* #{$property} #{$report} */
      }
      @content;
    }
  } @else {
    @content;
  }
}
